{"version":3,"file":"easyrouter.js","sources":["../src/main.js"],"sourcesContent":["/*#if process.env.BUILD === 'test'\nvar window\nif (typeof window != 'object') window = {}\nif (!window.location) window.location = { hash: '' }\n//#endif */\n\nconst router = (function easyRouter(window, UNDEF) {\n\n  const location = window.location\n  const _decode  = window.decodeURIComponent\n\n  const _noop = s => s\n\n  const _active = {}\n  let _routes = {}\n  let _rescue\n  let _enter\n  let _exit\n\n  function _fn(fn) {\n    return typeof fn == 'function' ? fn : UNDEF\n  }\n\n  /**\n   * Hash normalization, adds the first '#' and removes the last slash.\n   *\n   * @param   {String} hash - The hash to normalize\n   * @returns {String} Normalized hash.\n   * @private\n   */\n  function normalize(hash) {\n\n    // if the hash is empty, this will output the '#' alone\n    if (hash[0] !== '#') {\n      hash = `#${hash}`\n    }\n\n    // only removing if length > 2 (allows '#/' alone)\n    return hash.length > 2 && hash.slice(-1) === '/'\n        ? hash.slice(0, -1) : hash\n  }\n\n  /**\n   * Makes a shallow copy of `src`.\n   * Returns `null` if `src` is falsy.\n   *\n   * @param   {Object|null} src - Source object\n   * @returns {Object|null} New object with the properties of `src`.\n   */\n  function _dup(src) {\n    if (!src) {\n      return null\n    }\n\n    const dest = Object.create(null)\n    Object.keys(src).forEach(function (prop) { this[prop] = src[prop] }, dest)\n    return dest\n  }\n\n  /**\n   * Remove the first '#/' and trailing slashes from the given hash\n   * and returns it parts.\n   *\n   * @param   {string} hash - Hash to split\n   * @returns {string[]} Separate components of the hash\n   * @private\n   */\n  function _split(hash) {\n    return hash\n          .replace(/^#?\\/*(.*)\\/*$/, '$1')\n          .toLowerCase()\n          .split('/')\n  }\n\n  /**\n   * Determinate if two route paths have the same params.\n   *\n   * @param  {Object} a - Route\n   * @param  {Object} b - Route\n   * @return {boolean}\n   */\n  function _equ(a, b) {\n    const parms = a.path.split('/').filter(p => p[0] === ':')\n\n    for (let i = 0; i < parms.length; i++) {\n      const p = parms[i].substr(1)\n\n      if (a.params[p] !== b.params[p]) {\n        return false\n      }\n    }\n    return true\n  }\n\n  /**\n   * Find the route which the given hash belongs to.\n   *\n   * @param   {string} hash     - Already normalized hash\n   * @param   {Function} unesc  - Decoding function\n   * @returns {Object}\n   */\n  function _seek(hash, unesc) {\n    const parts  = _split(hash)\n    const params = {}\n    let route = _routes\n\n    for (let i = 0; i < parts.length; i++) {\n      const part = unesc(parts[i])\n      const name = part in route ? part : ':' in route ? ':' : '*'\n\n      route = route[name]\n      if (!route) {\n        return UNDEF\n      }\n      if (name === '*') {\n        break\n      }\n      if (route['~']) {\n        params[route['~']] = part\n      }\n    }\n\n    route = _dup(route['@'])\n    route.params = params\n    return route\n  }\n\n  /**\n   * Parses the queryString part.\n   *\n   * @param {Object} route    - Route object\n   * @param {string} queryStr - Query string\n   * @param {string} unesc    - Decoding function\n   * @returns {Object} The route\n   */\n  function _query(route, queryStr, unesc) {\n    if (queryStr && route) {\n      const qs = queryStr.split('&')\n\n      for (let i = 0; i < qs.length; i++) {\n        const pair = qs[i].split('=')\n\n        route.params[pair[0]] = unesc(pair[1])\n      }\n    }\n    return route\n  }\n\n  /*\n    Main method to define a new route.\n   */\n  function _add(src, cb) {\n    const path = normalize(src.path)\n    let route = _routes\n\n    _split(path).forEach(part => {\n      const parm = part[0] === ':' ? ':' : 0\n      const name = parm || part\n\n      route = route[name] || (route[name] = {})\n      if (parm) route['~'] = part.slice(1)\n    })\n\n    route = route['@'] = { enter: cb }\n\n    if (src) {\n      Object.keys(src).forEach(p => {\n        route[p] = p === 'path' ? path : src[p]\n      })\n    }\n    return route\n  }\n\n\n  const _R = {\n\n    /**\n     * Reset the router to their predefined values\n     *\n     * @returns {object} This chainable object\n     */\n    reset() {\n      this.clear()\n      _active.hash  = ''\n      _active.route = _rescue = _enter = _exit = UNDEF\n      return this\n    },\n\n    clear() {\n      _routes = {}\n      return this\n    },\n\n    /**\n     * Allows to define one or more routes.\n     *\n     * @param   {Array}    arr  - Array of templates for the routes\n     * @param   {Function} [cb] - Optional 'on' function\n     * @returns {Object}   This chainable object\n     */\n    concat(arr, cb) {\n      cb = _fn(cb)\n\n      if (Array.isArray(arr)) {\n        arr.forEach(src => { _add(src, cb) })\n      } else {\n        _add(arr, cb)\n      }\n      return this\n    },\n\n    /**\n     * If a route somehow ended up in your system without being properly bound to an action,\n     * you can specify a \"rescue\" method that will be called.\n     * This lets you provide instant user feedback if they click an undefined route.\n     *\n     * @param {Function} cb - The function to exec for routes without one.\n     * @returns {Object}      This chainable object\n     */\n    rescue(cb) {\n      _rescue = _fn(cb)\n      return this\n    },\n\n    enter(cb) {\n      _enter = _fn(cb)\n      return this\n    },\n\n    exit(cb) {\n      _exit = _fn(cb)\n      return this\n    },\n\n    route(hash) {\n      const parts = _split(normalize(hash))\n      let route = _routes\n\n      for (let i = 0; i < parts.length; i++) {\n        const part = parts[i]\n\n        route = route[part[0] === ':' ? ':' : part]\n        if (!route) {\n          return UNDEF\n        }\n      }\n\n      return route['@']\n    },\n\n    /**\n     * Returns an object with { ruote, params } for matching route\n     *\n     * @param   {string} hash - normalized hash\n     * @returns {object} `false` if href has not matching route\n     */\n    match(hash) {\n      const parts = hash.split('?')\n      const unesc = hash.indexOf('%') < 0 ? _noop : _decode\n\n      return _query(_seek(parts[0], unesc), parts[1], unesc)\n    },\n\n    /**\n     * Trigged on hash changes.\n     *\n     * @param   {string}  hash - The hash to run\n     * @returns {boolean} success flag\n     */\n    _run(hash) {\n      hash = normalize(hash)\n\n      if (_active.hash !== hash) {\n        const prev = _active.route\n        const next = this.match(hash)\n\n        // Hook for query-string only changes through the `query` method of\n        // the route.\n        if (next) {\n          next.hash = hash\n\n          // run the query function if any, and only if we have the same\n          // params for the non-queryStr parts (route already loaded)\n          if (next.query && prev && prev.path === next.path && _equ(prev, next)) {\n            if (next.query.call(this, next.params) === false) {\n              _active.hash  = hash\n              _active.route = next\n              return false\n            }\n          }\n        }\n\n        // if we have a previous route, call its `exit`\n        // method and abort if `exit` returns `false`\n        if (prev && prev.exit && prev.exit() === false) {\n          return false\n        }\n\n        // continue with the global `exit` routine.\n        if (_exit) {\n          _exit.call(this, prev)\n        }\n\n        // swap the current route info\n        _active.hash  = hash\n        _active.route = next\n\n        // call the global enter routine\n        if (_enter) {\n          _enter.call(this, next)\n        }\n\n        // if we have a new route with a `next` method, call it and return\n        if (next && next.enter) {\n          next.enter(next.params)\n          return true\n        }\n\n        // no route, fallback to rescue\n        if (_rescue) {\n          _rescue.call(this, hash)\n        }\n      }\n\n      // no route or the current route has no changes\n      return false\n    },\n\n    /**\n     * Go to the given hash\n     *\n     * @param   {String}  hash    - The target hash\n     * @param   {Boolean} [force] - `true` to always run the callback\n     * @returns {Object}  This chainable object\n     */\n    navigate(hash, force) {\n      if (force) {\n        _active.hash = '@'\n      }\n      if (force && normalize(location.hash) === normalize(hash)) {\n        this._run(hash)\n      } else {\n        location.hash = hash\n      }\n      return this\n    },\n\n    get _routes() {\n      return _routes\n    },\n\n    /**\n     * Default handler for hash changes\n     */\n    _handler() {\n      _R._run(location.hash)\n    },\n\n    /**\n     * This route will be automatically selected on page load.\n     *\n     * If a user were to land on your page without a route defined, you can\n     * force them to use a root route.\n     *\n     * @param   {string} [root] - The hash used as root\n     * @returns {object} This chainable object\n     */\n    listen(root) {\n\n      // check browser haschange support\n      if ('onhashchange' in window) {\n        window.addEventListener('hashchange', _R._handler, true)\n      } else {\n        throw new Error('easyRouter: Your browser has no hashchange support')\n      }\n\n      // normalize root\n      if (root) {\n        root = normalize(root)\n\n        // set a default rescue funtion if there's no one\n        if (!_rescue) {\n          _rescue = () => { location.hash = root }\n        }\n      }\n\n      // if we have a hash, run it\n      if (location.hash) {\n        this._run(location.hash)\n\n      // else if we have a root, set it (it will run automatically)\n      } else if (root) {\n        location.hash = root\n      }\n\n      return this\n    },\n\n  }\n\n  // aliases\n  _R.add = _R.concat\n\n  //#if process.env.BUILD === 'test'\n  _R._split = _split\n  _R._normalize = normalize\n  //#endif\n\n  return _R.reset()\n\n})(window)\n\nexport default router\n"],"names":["const","let"],"mappings":"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"}